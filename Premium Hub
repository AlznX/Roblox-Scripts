-- Enhanced Detection System with Improved Error Handling and Logging
local DetectionSystem = {}

-- Configuration
local CONFIG = {
    DETECTED_VERSION = "Solex Premium 0.4",
    LATEST_VERSION = "Demon Hub v1.2.5", -- Update this as needed
    ENABLE_LOGGING = true,
    ENABLE_KICK = true,
    GRACE_PERIOD = 3 -- seconds before kick
}

-- Utility Functions
local function safeCall(func, errorHandler)
    local success, result = pcall(func)
    if not success and errorHandler then
        errorHandler(result)
    end
    return success, result
end

local function formatMessage(template, data)
    local message = template
    for key, value in pairs(data) do
        message = message:gsub("{" .. key .. "}", tostring(value))
    end
    return message
end

local function logDetection(playerName, detectedVersion, timestamp)
    if not CONFIG.ENABLE_LOGGING then return end
    
    local logData = {
        player = playerName,
        version = detectedVersion,
        timestamp = timestamp,
        action = "version_mismatch_detected"
    }
    
    -- Enhanced logging with structured data
    print("=== DETECTION LOG ===")
    print("Player: " .. logData.player)
    print("Detected Version: " .. logData.version)
    print("Timestamp: " .. logData.timestamp)
    print("Action: " .. logData.action)
    print("===================")
    
    -- Optional: Send to external logging service
    -- You could add webhook or file logging here
end

-- Main Detection Function
function DetectionSystem.detectOutdatedVersion()
    safeCall(function()
        local player = game.Players.LocalPlayer
        if not player then
            warn("DetectionSystem: LocalPlayer not found")
            return
        end
        
        local playerName = player.Name or "Unknown"
        local timestamp = os.date("%Y-%m-%d %H:%M:%S")
        
        -- Enhanced warning message with better formatting
        local warningTemplate = [[
ðŸš€ Welcome, {playerName}! 

We've detected you're using an outdated version: {detectedVersion}
Latest version available: {latestVersion}

âœ¨ What's new in the latest version:
â€¢ Improved performance and stability
â€¢ New features and bug fixes
â€¢ Enhanced security measures
â€¢ Better user experience

ðŸ“‹ How to update:
1. Press F9 to open Developer Console
2. Download the latest version from our official source
3. Replace your current script

We appreciate your patience and hope to see you back soon with the latest features!
        ]]
        
        local messageData = {
            playerName = playerName,
            detectedVersion = CONFIG.DETECTED_VERSION,
            latestVersion = CONFIG.LATEST_VERSION
        }
        
        local formattedWarning = formatMessage(warningTemplate, messageData)
        
        -- Print to console with proper formatting
        print("=== DEMON HUB NOTICE ===")
        print(formattedWarning)
        print("========================")
        
        -- Log the detection
        logDetection(playerName, CONFIG.DETECTED_VERSION, timestamp)
        
        -- Optional grace period before kick
        if CONFIG.ENABLE_KICK then
            wait(CONFIG.GRACE_PERIOD)
            
            -- More user-friendly kick message
            local kickMessage = string.format(
                "ðŸŽ® Demon Hub Update Required\n\n" ..
                "Hi %s! We noticed you're using %s.\n\n" ..
                "âœ… Please update to %s for the best experience!\n" ..
                "ðŸ“± Check the Developer Console (F9) for update instructions.\n\n" ..
                "Thanks for being part of our community! ðŸŒŸ",
                playerName,
                CONFIG.DETECTED_VERSION,
                CONFIG.LATEST_VERSION
            )
            
            player:Kick(kickMessage)
        end
        
    end, function(error)
        -- Enhanced error handling
        warn("DetectionSystem Error: " .. tostring(error))
        print("Stack trace: " .. debug.traceback())
    end)
end

-- Additional utility functions
function DetectionSystem.setConfig(newConfig)
    for key, value in pairs(newConfig) do
        if CONFIG[key] ~= nil then
            CONFIG[key] = value
        end
    end
end

function DetectionSystem.getConfig()
    return CONFIG
end

-- Initialize and run detection
DetectionSystem.detectOutdatedVersion()

-- Export for external use
return DetectionSystem
